server.port=7903
spring.application.name=admin
eureka.instance.hostname=admin1
eureka.client.healthcheck.enabled=true
eureka.client.service-url.defaultZone=http://ek2.com:7902/eureka/
spring.security.user.name=root
spring.security.user.password=root
server.compression.enabled=true


hystrix.command.default.execution.isolation.strategy=SEMAPHORE
#隔离策略，默认是Thread, 可选Thread｜Semaphore
#thread 通过线程数量来限制并发请求数，可以提供额外的保护，但有一定的延迟。一般用于网络调用
#semaphore 通过semaphore count来限制并发请求数，适用于无网络的高并发请求
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=2000
#命令执行超时时间，默认1000ms
hystrix.command.default.execution.timeout.enabled=true
# 执行是否启用超时，默认启用true
hystrix.command.default.execution.isolation.thread.interruptOnTimeout=true
# 发生超时是是否中断，默认true
hystrix.command.default.execution.isolation.semaphore.maxConcurrentRequests=10
# 最大并发请求数，默认10，该参数当使用ExecutionIsolationStrategy.SEMAPHORE策略时才有效。如果达到最大并发请求数，请求会被拒绝。理论上选择semaphore size的原则和选择thread size一致，但选用semaphore时每次执行的单元要比较小且执行速度快（ms级别），否则的话应该用thread。
#semaphore应该占整个容器（tomcat）的线程池的一小部分。

management.endpoints.web.exposure.exclude=*

#zipkin
spring.zipkin.base-url=http://localhost:7906/
spring.sleuth.sampler.rate=1